FORMAT: 1A
HOST: https://api.commando.io/v1/

# Commando.io API
The official [Commando.io](https://commando.io) API.

> The API is only available to users on paid plans. To view plans and pricing see [https://commando.io](https://commando.io).

## Walkthrough Video

<iframe src="//player.vimeo.com/video/107547330?title=0&amp;byline=0&amp;portrait=0&amp;color=ffffff" width="525" height="289" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>

## Design
The Commando.io API is fully [RESTful](http://en.wikipedia.org/wiki/Representational_State_Transfer). You can access the resources provided by the API by using standard HTTP methods *(GET, DELETE, PUT, POST)*.

Any tool that is fluent in HTTP can communicate with the API simply by requesting the correct URI and method.

## HTTPS
All API requests must be made over **HTTPS**. HTTP requests will return `301 Moved Permanently` with a `location` header specifying the proper URL using HTTPS.

## Base URL
All API calls have a base URL of:
  
    https://api.commando.io

Assume every API request in this documentation is prefixed with the above base URL.

## Version
All API requests have a version after the base URL `https://api.commando.io/v1`, in this case **v1**.

## Authorization

In order to interact with the Commando.io API, you must authenticate using HTTP [basic authorization](http://en.wikipedia.org/wiki/Basic_access_authentication). This is accomplished using the standard `-u` or `--user` flags in curl. Your account alias is the username and a valid API token secret key is the password. Your account alias is simply the subdomain that you access Commando.io with. For example the account alias of *(https://foo.commando.io)* is `foo`. 

    curl -u foo:skey_2azljcEZBjjxKQ53cf5cc807a673EqqdNmT https://api.commando.io/v1

You may create API tokens on the **settings** page in the Commando.io web interface.

![Create API Token](https://static.commando.io/img/api-docs/cr-api-token.png)

![View API Tokens](https://static.commando.io/img/api-docs/view-api-tokens.png)

## Verbs

The Commando.io API uses RESTful verbs.

| Verb     | Usage                                                          |
|----------|----------------------------------------------------------------|
| `GET`    | Retrieval of information. The information you request will be returned to you as a JSON object. The attributes defined by the JSON object can be used to form additional requests. Any request using the GET method is read-only and will not affect any of the objects you are querying. |
| `DELETE` | To destroy a resource and remove it. This will remove the specified object if it is found. If it is not found, the operation will return a response indicating that the object was not found. This idempotency means that you do not have to check for a resource's availability prior to issuing a delete command, the final state will be the same regardless of its existence. |
| `PUT`    | Update the information about a resource. Like the DELETE Method, the PUT method is idempotent. It sets the state of the target using the provided values, regardless of their current values. Requests using the PUT method do not need to check the current attributes of the object. |
| `POST`   | Create a new object. The POST request includes all of the attributes necessary to create a new object. When you wish to create a new object, send a POST request to the target endpoint. |

## Post Parameters

Post parameters should be passed with content type `application/x-www-form-urlencoded`. This is accomplished using the standard `-d` or `--data` flags in curl. For example:

    curl -u foo:skey_2azljcEZBjjxKQ53cf5cc807a673EqqdNmT https://api.commando.io/v1/resource -X POST -d "key=value"

## HTTP Status Codes
In the event of a problem, the status will contain the error code, while the body of the response will contain additional information about the problem that was encountered.

In general, if the status returned is in the 200 range, it indicates that the request was fulfilled successfully and that no error was encountered.

Status codes in the 400 range typically indicate that there was an issue with the request that was sent. Among other things, this could mean that you did not authenticate correctly, that you are requesting an action that you do not have authorization for, that the object you are requesting does not exist, or that your request is malformed.

If you receive a status in the 500 range, this generally indicates a server-side problem. This means that we are having an issue on our end and cannot fulfill your request currently.

| Status Code | Outcome                                      | Message                               |
|-------------|----------------------------------------------|---------------------------------------|
| 200         | <span style="color: green">Successful</span> | OK
| 201         | <span style="color: green">Successful</span> | Created
| 202         | <span style="color: green">Successful</span> | Accepted
| 204         | <span style="color: green">Successful</span> | No Content
| 400         | <span style="color: red">Unsuccessful</span> | Bad Request
| 401         | <span style="color: red">Unsuccessful</span> | Unauthenticated
| 403         | <span style="color: red">Unsuccessful</span> | Forbidden
| 404         | <span style="color: red">Unsuccessful</span> | Not Found
| 405         | <span style="color: red">Unsuccessful</span> | Method Not Allowed
| 408         | <span style="color: red">Unsuccessful</span> | Request Timeout
| 409         | <span style="color: red">Unsuccessful</span> | Conflict
| 429         | <span style="color: red">Unsuccessful</span> | Too Many Requests
| 500         | <span style="color: red">Unsuccessful</span> | Internal Server Error
| 503         | <span style="color: red">Unsuccessful</span> | Service Unavailable
| 504         | <span style="color: red">Unsuccessful</span> | Gateway Timeout

## Response
All responses return **pretty printed** [JSON] (http://en.wikipedia.org/wiki/JSON) with a content type header of `application/json`. When a request is successful, a response body will typically be sent back in the form of a JSON object. An exception to this is when a `DELETE` request is processed, which will result in a HTTP status `204 No Content` and an empty response body.

## Error Response Body

All errors always return back a predictable JSON object with a top level property `error` and three child properties `status_code`, `status`, and `message`. The following is a `401 Unauthorized` example response body:

    {
        "error": {
            "status_code": 401,
            "status": "Unauthorized",
            "message": "The requested resource requires user authentication."
        }
    }
    
## Dates

All dates are [ISO 8601](http://en.wikipedia.org/wiki/ISO_8601) format in **UTC** Â±00:00.

    2014-09-08T23:53:18Z
    
## Meta

In addition to the main resource, the response may also contain a meta object. This object contains additional information.

    {
        ...
        "meta": {
        
        }
        ...
    }
    
## URL

Some resources return a convenience `url` property which is the url *(excluding the base API host)* you may request to view the current resource again. 

    {
        ...
        "url": "/v1/execution-queue/53bc635798c61efc068da76bc4"
        ...
    }
    
## Links

Some resources return a links object which contains a key and a url *(excluding the base API host)* you may request to view related resources.

    {
        ...
        "links": {
            "execution: "/v1/executions/53bc635798c61efc068da76bc4"
        }
        ...
    }

## Rate Limiting

We inforce rate limiting at our API web servers. The Commando.io API rate limit is a maximum of 30 requests per minute based off IP address with burst of 10 requests. Essentially this breaks down to a request every 2 seconds.

If you exceed the rate limit HTTP status `429 Too Many Requests` and an empty response body is returned.

## Client Libraries
We are looking for developers who are interested in creating and maintaining client libraries in **Node.js**, **Ruby**, **Python**, **PHP**, **Go**, and **Perl**. [E-mail us](mailto:hello@commando.io) or create an [issue on GitHub](https://github.com/commando/API) if you are interested in helping out *(we are giving away free Commando.io service for high quality client libraries)*.

# Group Base
The base resource.

## Get API information [/]
General API information and the API version. Useful for test requests.

### <GET> / [GET]

+ Response 200 (application/json)
    + Headers
    
            X-Commando-API-Version: v1

    + Body
    
            {
                "description": "Commando.io API",
                "version": "v1",
                "documentation": "http://docs.commando.apiary.io",
                "support": "hello@commando.io"
            }

# Group Recipes
The recipes resource.

## Run an execution [/recipes/@recipe-id/execute]
Run an execution using a specified recipe on a server or multiple groups of servers. The response returns an `Execution Queue` resource, which you can query by `id` to view the status and events of the execution. There is also a convenience property `url`, which is a direct link to the execution queue.

### <POST> /recipes/@recipe-id/execute [POST]

### Post Parameters

+ **server** *(required one of server or groups)* ... A single server id. You may find server ids in the modal popup when clicking a server in the Commando.io web interface.
+ **groups[]** *(required one of server or groups)* ... A list of group ids seperated by commas. You may find group ids in the modal popup when clicking a group in the Commando.io web interface.
+ **halt_on_stderr** *(optional)* *[default=false]* ... If a server returns stderr during execution, halt and prevent the remaining servers from executing the recipe.
+ **notes** *(optional)* Optional notes and comments you wish to attach to this execution. [Markdown](http://daringfireball.net/projects/markdown/) is supported. Be sure to properly escape and url encode notes.

+ Response 202 (application/json)
    + Headers
    
            X-Commando-API-Version: v1

    + Body
    
            {
                "id": "53bc635798c61efc068da76bc4",
                "url": "/v1/execution-queue/53bc635798c61efc068da76bc4",
                "api_version": "v1",
                "status": "QUEUED",
                "recipe": "rec_3Fc5q540e480b672d38Ig",
                "groups": [
                    "grp_2Xk7x540e481bcb9c775d"
                ],
                "halt_on_stderr": false,
                "notes": null,
                "created": "2014-09-08T23:53:18Z",
                "created_by": {
                    "id": "usr_9ukjE540e4870aace5VFr",
                    "ip_address": "198.199.100.1",
                    "geo_ip": "San Francisco, California, United States",
                    "user_agent": "curl 7.37.1 (x86_64-apple-darwin14.0) libcurl/7.37.1 SecureTransport zlib/1.2.5"
                },
                "events": [
                    {
                        "status": "QUEUED",
                        "date": "2014-09-08T23:53:18Z",
                        "meta": {
                            "queue": {
                                "ids": [
                                    "6051850439878915341"
                                ],
                                "msg": "Messages put on queue.",
                                "id": "6051850439878915341"
                            }
                        }
                    }
                ]
            }
            
# Group Execution Queue
The execution queue resource.

## Get an execution queue [/execution-queue/@id]
Get an execution queue by `id`.

The `status` property can be one of `QUEUED`, `RUNNING`, `ERROR`, `COMPLETE`. The `events[]` array contains information about the execution throughout its lifecycle.

Once the execution is complete, a convience `links` property will be added with a key of `execution` and a value of the url to query to view the execution results.

### <GET> /execution-queue/@id [GET]

+ Response 200 (application/json)
    + Headers
    
            X-Commando-API-Version: v1

    + Body
    
            {
                "id": "53bc635798c61efc068da76bc4",
                "url": "/v1/execution-queue/53bc635798c61efc068da76bc4",
                "api_version": "v1",
                "status": "COMPLETE",
                "recipe": "rec_3Fc5q540e480b672d38Ig",
                "groups": [
                    "grp_2Xk7x540e481bcb9c775d"
                ],
                "halt_on_stderr": false,
                "notes": null,
                "created": "2014-09-08T23:53:18Z",
                "created_by": {
                    "id": "usr_9ukjE540e4870aace5VFr",
                    "ip_address": "198.199.100.1",
                    "geo_ip": "San Francisco, California, United States",
                    "user_agent": "curl 7.37.1 (x86_64-apple-darwin14.0) libcurl/7.37.1 SecureTransport zlib/1.2.5"
                },
                "events": [
                    {
                        "status": "QUEUED",
                        "date": "2014-09-08T23:53:18Z",
                        "meta": {
                            "queue": {
                                "ids": [
                                    "6051850439878915341"
                                ],
                                "msg": "Messages put on queue.",
                                "id": "6051850439878915341"
                            }
                        }
                    },
                    {
                        "status": "RUNNING",
                        "date": "2014-09-08T23:53:32Z",
                        "meta": {
                            "host": "web8.commando.io",
                            "pid": 10632
                        }
                    },
                    {
                        "status": "COMPLETE",
                        "date": "2014-09-08T23:53:34Z",
                        "meta": {
                            "host": "web8.commando.io",
                            "pid": 10632
                        }
                    }
                ],
                "links": {
                    "execution": "/v1/executions/53bc635798c61efc068da76bc4"
                }
            }
            
# Group Executions
The executions resource.

## Get an execution [/executions/@id]
Get an execution by `id`.

### <GET> /executions/@id [GET]

+ Response 200 (application/json)
    + Headers
    
            X-Commando-API-Version: v1

    + Body
    
            {
                "id": "53bc635798c61efc068da76bc4",
                "url": "/v1/executions/53bc635798c61efc068da76bc4",
                "executed": "2014-09-08T23:53:34Z",
                "api_execution": true,
                "total_execution_time": 0.432,
                "executed_by": "usr_9ukjE540e4870aace5VFr",
                "executed_by_ip_address": "198.199.100.1",
                "executed_by_geoip": "San Francisco, California, United States",
                "executed_by_user_agent": "curl 7.37.1 (x86_64-apple-darwin14.0) libcurl/7.37.1 SecureTransport zlib/1.2.5",
                "executed_by_detailed": {
                    "primary": true,
                    "activated": true,
                    "first_name": "Johnny",
                    "last_name": "Appleseed",
                    "email_address": "hello@commando.io",
                    "location": "San Francisco, California, United States",
                    "added": "2014-09-01T21:43:21Z",
                    "modified": "2014-09-01T21:43:21Z"
                },
                "groups": [
                    "grp_2Xk7x540e481bcb9c775d"
                ],
                "recipe": {
                    "id": "rec_3Fc5q540e480b672d38Ig",
                    "name": "FREE",
                    "public_uri": null,
                    "recipe_version": "ver_Ha7VI4pdS9ZTvvR3AaQT3",
                    "interpreter": "bash",
                    "notes": "**free** displays the total amount of free and used physical and swap memory *(in megabytes)* in the system, as well as the buffers used by the kernel.",
                    "content": "free -m",
                    "added": "2014-09-06T10:12:30Z",
                    "public": null,
                    "public_by": null,
                    "sha": "0e127844d743a6793bacfb3044e05530988dc6af"
                },
                "parallel": false,
                "halt_on_stderr": false,
                "notes": null,
                "servers": [
                    {
                        "id": "srv_9GkE2IWvkzItmaTs5Agn8",
                        "label": "WEB1",
                        "group": "grp_2Xk7x540e481bcb9c775d",
                        "group_name": "NYC2",
                        "tags": [
                            "DIGITALOCEAN",
                            "NYC2"
                        ],
                        "added": "2014-09-05T13:38:02Z",
                        "modified": "2014-09-05T13:38:02Z"
                    },
                    {
                        "id": "srv_5EdvDbyOtmF9nXS7ZowcB",
                        "label": "WEB2",
                        "group": "grp_2Xk7x540e481bcb9c775d",
                        "group_name": "NYC2",
                        "tags": [
                            "DIGITALOCEAN",
                            "NYC2"
                        ],
                        "added": "2014-09-05T13:42:21Z",
                        "modified": "2014-09-05T13:42:21Z"
                    }
                ],
                "results": [
                    {
                        "server": "srv_9GkE2IWvkzItmaTs5Agn8",
                        "server_label": "WEB1",
                        "stream": [
                            "stdout"
                        ],
                        "result": {
                            "stdout": "             total       used       free     shared    buffers     cached\nMem:           490        458         32          0        132        263\n-/+ buffers/cache:         62        428\nSwap:            0          0          0\n"
                        },
                        "execution_time": 0.211
                    },
                    {
                        "server": "srv_5EdvDbyOtmF9nXS7ZowcB",
                        "server_label": "WEB2",
                        "stream": [
                            "stdout"
                        ],
                        "result": {
                            "stdout": "             total       used       free     shared    buffers     cached\nMem:           490        363        127          0        132        176\n-/+ buffers/cache:         54        436\nSwap:            0          0          0\n"
                        },
                        "execution_time": 0.221
                    }
                ]
            }
